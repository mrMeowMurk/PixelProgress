{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3002/api';\nexport const steamApi = {\n  // Конвертация vanity URL в Steam ID\n  async resolveVanityUrl(vanityUrl) {\n    try {\n      console.log(`Resolving vanity URL: ${vanityUrl}`);\n      const response = await fetch(`${API_BASE_URL}/resolve/${vanityUrl}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to resolve vanity URL');\n      }\n      const data = await response.json();\n      console.log('Vanity URL resolution data received:', data);\n      return data.steamId;\n    } catch (error) {\n      console.error('Error resolving vanity URL:', error);\n      throw error;\n    }\n  },\n  // Получение списка игр пользователя\n  async getOwnedGames(steamId) {\n    try {\n      console.log(`Fetching games for Steam ID: ${steamId}`);\n      const response = await fetch(`${API_BASE_URL}/games/${steamId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch games');\n      }\n      const data = await response.json();\n      console.log('Games data received:', data);\n      return data.response.games || [];\n    } catch (error) {\n      console.error('Error fetching owned games:', error);\n      throw error;\n    }\n  },\n  // Получение достижений для конкретной игры\n  async getGameAchievements(steamId, appId) {\n    try {\n      var _data$playerstats;\n      console.log(`Fetching achievements for Steam ID: ${steamId}, App ID: ${appId}`);\n      const response = await fetch(`${API_BASE_URL}/achievements/${steamId}/${appId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch achievements');\n      }\n      const data = await response.json();\n      console.log('Achievements data received:', data);\n      return ((_data$playerstats = data.playerstats) === null || _data$playerstats === void 0 ? void 0 : _data$playerstats.achievements) || [];\n    } catch (error) {\n      console.error('Error fetching achievements:', error);\n      return [];\n    }\n  },\n  // Получение информации о последней игре\n  async getRecentlyPlayedGames(steamId) {\n    try {\n      var _data$response;\n      console.log(`Fetching recent games for Steam ID: ${steamId}`);\n      const response = await fetch(`${API_BASE_URL}/recent/${steamId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch recently played games');\n      }\n      const data = await response.json();\n      console.log('Recent games data received:', data);\n      return ((_data$response = data.response) === null || _data$response === void 0 ? void 0 : _data$response.recentlyPlayedGames) || [];\n    } catch (error) {\n      console.error('Error fetching recently played games:', error);\n      return [];\n    }\n  },\n  // Получение информации о пользователе\n  async getPlayerInfo(steamId) {\n    try {\n      var _data$response2;\n      console.log(`Fetching player info for Steam ID: ${steamId}`);\n      const response = await fetch(`${API_BASE_URL}/player/${steamId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch player info');\n      }\n      const data = await response.json();\n      console.log('Player info data received:', data);\n      return ((_data$response2 = data.response) === null || _data$response2 === void 0 ? void 0 : _data$response2.players[0]) || null;\n    } catch (error) {\n      console.error('Error fetching player info:', error);\n      throw error;\n    }\n  },\n  // Получение детальной информации об игре\n  async getGameDetails(appId) {\n    try {\n      var _data$response3;\n      const response = await fetch(`${API_BASE_URL}/game/${appId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to fetch game details');\n      }\n      const data = await response.json();\n      console.log('Game details data received:', data);\n      return ((_data$response3 = data.response) === null || _data$response3 === void 0 ? void 0 : _data$response3.gameDetails) || null;\n    } catch (error) {\n      console.error('Error fetching game details:', error);\n      return null;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","steamApi","resolveVanityUrl","vanityUrl","console","log","response","fetch","ok","errorData","json","Error","error","data","steamId","getOwnedGames","games","getGameAchievements","appId","_data$playerstats","playerstats","achievements","getRecentlyPlayedGames","_data$response","recentlyPlayedGames","getPlayerInfo","_data$response2","players","getGameDetails","_data$response3","gameDetails"],"sources":["E:/Programming/Projects/JS/steam-tracker/client/src/services/steamApi.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:3002/api';\r\n\r\nexport const steamApi = {\r\n  // Конвертация vanity URL в Steam ID\r\n  async resolveVanityUrl(vanityUrl) {\r\n    try {\r\n      console.log(`Resolving vanity URL: ${vanityUrl}`);\r\n      const response = await fetch(`${API_BASE_URL}/resolve/${vanityUrl}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to resolve vanity URL');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Vanity URL resolution data received:', data);\r\n      return data.steamId;\r\n    } catch (error) {\r\n      console.error('Error resolving vanity URL:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Получение списка игр пользователя\r\n  async getOwnedGames(steamId) {\r\n    try {\r\n      console.log(`Fetching games for Steam ID: ${steamId}`);\r\n      const response = await fetch(`${API_BASE_URL}/games/${steamId}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch games');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Games data received:', data);\r\n      return data.response.games || [];\r\n    } catch (error) {\r\n      console.error('Error fetching owned games:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Получение достижений для конкретной игры\r\n  async getGameAchievements(steamId, appId) {\r\n    try {\r\n      console.log(`Fetching achievements for Steam ID: ${steamId}, App ID: ${appId}`);\r\n      const response = await fetch(`${API_BASE_URL}/achievements/${steamId}/${appId}`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch achievements');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Achievements data received:', data);\r\n      return data.playerstats?.achievements || [];\r\n    } catch (error) {\r\n      console.error('Error fetching achievements:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Получение информации о последней игре\r\n  async getRecentlyPlayedGames(steamId) {\r\n    try {\r\n      console.log(`Fetching recent games for Steam ID: ${steamId}`);\r\n      const response = await fetch(`${API_BASE_URL}/recent/${steamId}`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch recently played games');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Recent games data received:', data);\r\n      return data.response?.recentlyPlayedGames || [];\r\n    } catch (error) {\r\n      console.error('Error fetching recently played games:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  // Получение информации о пользователе\r\n  async getPlayerInfo(steamId) {\r\n    try {\r\n      console.log(`Fetching player info for Steam ID: ${steamId}`);\r\n      const response = await fetch(`${API_BASE_URL}/player/${steamId}`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch player info');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Player info data received:', data);\r\n      return data.response?.players[0] || null;\r\n    } catch (error) {\r\n      console.error('Error fetching player info:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Получение детальной информации об игре\r\n  async getGameDetails(appId) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/game/${appId}`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch game details');\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log('Game details data received:', data);\r\n      return data.response?.gameDetails || null;\r\n    } catch (error) {\r\n      console.error('Error fetching game details:', error);\r\n      return null;\r\n    }\r\n  }\r\n}; "],"mappings":"AAAA,MAAMA,YAAY,GAAG,2BAA2B;AAEhD,OAAO,MAAMC,QAAQ,GAAG;EACtB;EACA,MAAMC,gBAAgBA,CAACC,SAAS,EAAE;IAChC,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,yBAAyBF,SAAS,EAAE,CAAC;MACjD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,YAAYG,SAAS,EAAE,CAAC;MAEpE,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,8BAA8B,CAAC;MACpE;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEQ,IAAI,CAAC;MACzD,OAAOA,IAAI,CAACC,OAAO;IACrB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMG,aAAaA,CAACD,OAAO,EAAE;IAC3B,IAAI;MACFV,OAAO,CAACC,GAAG,CAAC,gCAAgCS,OAAO,EAAE,CAAC;MACtD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,UAAUc,OAAO,EAAE,CAAC;MAEhE,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,uBAAuB,CAAC;MAC7D;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEQ,IAAI,CAAC;MACzC,OAAOA,IAAI,CAACP,QAAQ,CAACU,KAAK,IAAI,EAAE;IAClC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMK,mBAAmBA,CAACH,OAAO,EAAEI,KAAK,EAAE;IACxC,IAAI;MAAA,IAAAC,iBAAA;MACFf,OAAO,CAACC,GAAG,CAAC,uCAAuCS,OAAO,aAAaI,KAAK,EAAE,CAAC;MAC/E,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,iBAAiBc,OAAO,IAAII,KAAK,EAAE,CAAC;MAEhF,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,8BAA8B,CAAC;MACpE;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEQ,IAAI,CAAC;MAChD,OAAO,EAAAM,iBAAA,GAAAN,IAAI,CAACO,WAAW,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,YAAY,KAAI,EAAE;IAC7C,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACA,MAAMU,sBAAsBA,CAACR,OAAO,EAAE;IACpC,IAAI;MAAA,IAAAS,cAAA;MACFnB,OAAO,CAACC,GAAG,CAAC,uCAAuCS,OAAO,EAAE,CAAC;MAC7D,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,WAAWc,OAAO,EAAE,CAAC;MAEjE,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,uCAAuC,CAAC;MAC7E;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEQ,IAAI,CAAC;MAChD,OAAO,EAAAU,cAAA,GAAAV,IAAI,CAACP,QAAQ,cAAAiB,cAAA,uBAAbA,cAAA,CAAeC,mBAAmB,KAAI,EAAE;IACjD,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACA,MAAMa,aAAaA,CAACX,OAAO,EAAE;IAC3B,IAAI;MAAA,IAAAY,eAAA;MACFtB,OAAO,CAACC,GAAG,CAAC,sCAAsCS,OAAO,EAAE,CAAC;MAC5D,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,WAAWc,OAAO,EAAE,CAAC;MAEjE,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,6BAA6B,CAAC;MACnE;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEQ,IAAI,CAAC;MAC/C,OAAO,EAAAa,eAAA,GAAAb,IAAI,CAACP,QAAQ,cAAAoB,eAAA,uBAAbA,eAAA,CAAeC,OAAO,CAAC,CAAC,CAAC,KAAI,IAAI;IAC1C,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACA,MAAMgB,cAAcA,CAACV,KAAK,EAAE;IAC1B,IAAI;MAAA,IAAAW,eAAA;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,YAAY,SAASkB,KAAK,EAAE,CAAC;MAE7D,IAAI,CAACZ,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,8BAA8B,CAAC;MACpE;MAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClCN,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEQ,IAAI,CAAC;MAChD,OAAO,EAAAgB,eAAA,GAAAhB,IAAI,CAACP,QAAQ,cAAAuB,eAAA,uBAAbA,eAAA,CAAeC,WAAW,KAAI,IAAI;IAC3C,CAAC,CAAC,OAAOlB,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,IAAI;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}