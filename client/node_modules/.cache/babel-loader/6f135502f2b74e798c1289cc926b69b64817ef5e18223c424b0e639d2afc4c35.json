{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\Projects\\\\JS\\\\steam-tracker\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { steamApi } from './services/steamApi';\nimport GameCard from './components/GameCard/GameCard';\nimport StatsSection from './components/StatsSection/StatsSection';\nimport ProfileSection from './components/ProfileSection/ProfileSection';\nimport WelcomeMessage from './components/WelcomeMessage/WelcomeMessage';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [steamId, setSteamId] = useState('');\n  const [games, setGames] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [filter, setFilter] = useState('all'); // all, completed, in-progress, want-to-play\n  const [searchQuery, setSearchQuery] = useState('');\n  const [playerInfo, setPlayerInfo] = useState(null);\n  const [displayMode, setDisplayMode] = useState(localStorage.getItem('displayMode') || 'grid');\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'dark');\n  const [accountStats, setAccountStats] = useState({\n    totalGames: 0,\n    totalPlaytime: 0,\n    completedGames: 0,\n    averageCompletion: 0,\n    totalAchievements: 0\n  });\n\n  // Применяем тему\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Сохраняем режим отображения\n  useEffect(() => {\n    localStorage.setItem('displayMode', displayMode);\n  }, [displayMode]);\n  const toggleTheme = () => {\n    setTheme(theme === 'dark' ? 'light' : 'dark');\n  };\n  const toggleDisplayMode = () => {\n    setDisplayMode(displayMode === 'grid' ? 'list' : 'grid');\n  };\n  const formatPlayTime = minutes => {\n    if (!minutes) return '0 hours';\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    if (hours === 0) {\n      return `${remainingMinutes} minutes`;\n    } else if (remainingMinutes === 0) {\n      return `${hours.toLocaleString()} hours`;\n    } else {\n      return `${hours.toLocaleString()} hours ${remainingMinutes} minutes`;\n    }\n  };\n  const formatLastPlayed = timestamp => {\n    if (!timestamp) return 'Never played';\n    const date = new Date(timestamp * 1000);\n    const now = new Date();\n    const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));\n    if (diffDays === 0) return 'Today';\n    if (diffDays === 1) return 'Yesterday';\n    if (diffDays < 7) return `${diffDays} days ago`;\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\n    if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\n    return `${Math.floor(diffDays / 365)} years ago`;\n  };\n\n  // Извлечение Steam ID или vanity URL из разных форматов ввода\n  const extractSteamIdentifier = input => {\n    if (/^\\d+$/.test(input)) return input;\n    const urlMatch = input.match(/steamcommunity\\.com\\/(id|profiles)\\/([^\\/]+)/);\n    if (urlMatch) return urlMatch[1] === 'profiles' ? urlMatch[2] : urlMatch[2];\n    return input;\n  };\n  const calculateAccountStats = gamesData => {\n    const stats = {\n      totalGames: gamesData.length,\n      totalPlaytime: gamesData.reduce((acc, game) => acc + (game.playtime_forever || 0), 0),\n      completedGames: gamesData.filter(game => game.status === 'completed').length,\n      totalAchievements: gamesData.reduce((acc, game) => acc + (game.achievements || 0), 0),\n      mostPlayedGame: null,\n      recentlyPlayed: [],\n      gamesNotPlayed: 0,\n      achievementRate: 0,\n      totalAchievementsAvailable: 0,\n      averagePlaytime: 0\n    };\n\n    // Находим самую играбельную игру\n    const mostPlayed = gamesData.reduce((prev, current) => (prev.playtime_forever || 0) > (current.playtime_forever || 0) ? prev : current, {\n      playtime_forever: 0\n    });\n    if (mostPlayed.title) {\n      stats.mostPlayedGame = {\n        name: mostPlayed.title,\n        playtime: formatPlayTime(mostPlayed.playtime_forever)\n      };\n    }\n\n    // Подсчитываем игры без времени игры\n    stats.gamesNotPlayed = gamesData.filter(game => !game.playtime_forever).length;\n\n    // Средний процент завершения\n    stats.averageCompletion = Math.round(gamesData.reduce((acc, game) => acc + game.progress, 0) / gamesData.length);\n\n    // Процент выполнения достижений\n    stats.totalAchievementsAvailable = gamesData.reduce((acc, game) => acc + (game.totalAchievements || 0), 0);\n    if (stats.totalAchievementsAvailable > 0) {\n      stats.achievementRate = Math.round(stats.totalAchievements / stats.totalAchievementsAvailable * 100);\n    }\n\n    // Среднее время в играх (исключая неиграные игры)\n    const gamesWithPlaytime = gamesData.filter(game => game.playtime_forever > 0);\n    if (gamesWithPlaytime.length > 0) {\n      stats.averagePlaytime = Math.round(gamesWithPlaytime.reduce((acc, game) => acc + game.playtime_forever, 0) / gamesWithPlaytime.length);\n    }\n\n    // Недавно сыгранные игры (последние 2 недели)\n    const twoWeeksAgo = Date.now() - 14 * 24 * 60 * 60 * 1000;\n    stats.recentlyPlayed = gamesData.filter(game => game.rtime_last_played && game.rtime_last_played * 1000 > twoWeeksAgo).sort((a, b) => b.rtime_last_played - a.rtime_last_played).slice(0, 5).map(game => ({\n      name: game.title,\n      lastPlayed: formatLastPlayed(game.rtime_last_played)\n    }));\n    setAccountStats(stats);\n  };\n  const handleSteamIdSubmit = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setError('');\n    try {\n      const identifier = extractSteamIdentifier(steamId);\n      let finalSteamId = identifier;\n      if (!identifier.match(/^\\d+$/)) {\n        try {\n          finalSteamId = await steamApi.resolveVanityUrl(identifier);\n        } catch (error) {\n          throw new Error('Invalid Steam ID or profile URL. Please check your input and try again.');\n        }\n      }\n      const player = await steamApi.getPlayerInfo(finalSteamId);\n      setPlayerInfo(player);\n      const ownedGames = await steamApi.getOwnedGames(finalSteamId);\n      const recentGames = await steamApi.getRecentlyPlayedGames(finalSteamId);\n      const recentGameIds = new Set(recentGames.map(game => game.appid));\n\n      // Получаем дополнительную информацию о каждой игре\n      const gamesWithDetails = await Promise.all(ownedGames.map(async game => {\n        var _gameDetails, _gameDetails$genres, _gameDetails2, _gameDetails3;\n        let achievements;\n        try {\n          achievements = await steamApi.getGameAchievements(finalSteamId, game.appid);\n        } catch (error) {\n          achievements = {\n            achievements: []\n          };\n        }\n        let gameDetails;\n        try {\n          gameDetails = await steamApi.getGameDetails(game.appid);\n        } catch (error) {\n          console.log(`Could not fetch details for game ${game.name}:`, error.message);\n          gameDetails = null;\n        }\n        const completedAchievements = achievements.filter(a => a.achieved).length;\n        const progress = achievements.length > 0 ? Math.round(completedAchievements / achievements.length * 100) : 0;\n        const status = progress === 100 ? 'completed' : 'in-progress';\n        return {\n          id: game.appid,\n          title: game.name,\n          progress: progress,\n          achievements: completedAchievements,\n          totalAchievements: achievements.length,\n          lastPlayed: game.rtime_last_played ? formatLastPlayed(game.rtime_last_played) : 'Never played',\n          image: `https://cdn.akamai.steamstatic.com/steam/apps/${game.appid}/header.jpg`,\n          playTime: formatPlayTime(game.playtime_forever || 0),\n          playtime_forever: game.playtime_forever || 0,\n          status: status,\n          genres: ((_gameDetails = gameDetails) === null || _gameDetails === void 0 ? void 0 : (_gameDetails$genres = _gameDetails.genres) === null || _gameDetails$genres === void 0 ? void 0 : _gameDetails$genres.map(genre => genre.description)) || [],\n          release_date: ((_gameDetails2 = gameDetails) === null || _gameDetails2 === void 0 ? void 0 : _gameDetails2.release_date) || null,\n          metacritic: ((_gameDetails3 = gameDetails) === null || _gameDetails3 === void 0 ? void 0 : _gameDetails3.metacritic) || null,\n          rtime_last_played: game.rtime_last_played\n        };\n      }));\n      setGames(gamesWithDetails);\n      calculateAccountStats(gamesWithDetails);\n    } catch (err) {\n      setError(err.message || 'Failed to fetch games. Please check your Steam ID or profile URL and try again.');\n      console.error('Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updateGameStatus = (gameId, newStatus) => {\n    setGames(games.map(game => game.id === gameId ? {\n      ...game,\n      status: newStatus\n    } : game));\n  };\n  const filteredGames = games.filter(game => {\n    const matchesFilter = filter === 'all' || game.status === filter;\n    const matchesSearch = game.title.toLowerCase().includes(searchQuery.toLowerCase());\n    return matchesFilter && matchesSearch;\n  });\n\n  // Быстрые фильтры\n  const filterButtons = [{\n    value: 'all',\n    label: 'All'\n  }, {\n    value: 'completed',\n    label: 'Completed'\n  }, {\n    value: 'in-progress',\n    label: 'In Progress'\n  }, {\n    value: 'want-to-play',\n    label: 'Want to Play'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleTheme,\n          className: \"theme-toggle\",\n          children: theme === 'dark' ? '☀️' : '🌙'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleDisplayMode,\n          className: \"display-toggle\",\n          children: displayMode === 'grid' ? '📝' : '🎴'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WelcomeMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Steam Pixel Progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSteamIdSubmit,\n        className: \"steam-id-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: steamId,\n          onChange: e => setSteamId(e.target.value),\n          placeholder: \"Enter Steam ID, profile URL, or custom URL\",\n          className: \"steam-id-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          disabled: loading,\n          children: loading ? 'Loading...' : 'Load Profile'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 17\n    }, this), playerInfo && /*#__PURE__*/_jsxDEV(ProfileSection, {\n      playerInfo: playerInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 9\n    }, this), games.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(StatsSection, {\n        games: games,\n        accountStats: accountStats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filters\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchQuery,\n          onChange: e => setSearchQuery(e.target.value),\n          placeholder: \"Search games...\",\n          className: \"search-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-buttons\",\n          children: filterButtons.map(btn => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `filter-btn${filter === btn.value ? ' active' : ''}`,\n            onClick: () => setFilter(btn.value),\n            type: \"button\",\n            children: btn.label\n          }, btn.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: `games-container ${displayMode}`,\n        children: filteredGames.map(game => /*#__PURE__*/_jsxDEV(GameCard, {\n          game: game,\n          onStatusChange: updateGameStatus,\n          displayMode: displayMode\n        }, game.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ueRgJFwK1MQv3biP8uCsbk5wK/w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","steamApi","GameCard","StatsSection","ProfileSection","WelcomeMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","steamId","setSteamId","games","setGames","loading","setLoading","error","setError","filter","setFilter","searchQuery","setSearchQuery","playerInfo","setPlayerInfo","displayMode","setDisplayMode","localStorage","getItem","theme","setTheme","accountStats","setAccountStats","totalGames","totalPlaytime","completedGames","averageCompletion","totalAchievements","document","documentElement","setAttribute","setItem","toggleTheme","toggleDisplayMode","formatPlayTime","minutes","hours","Math","floor","remainingMinutes","toLocaleString","formatLastPlayed","timestamp","date","Date","now","diffDays","extractSteamIdentifier","input","test","urlMatch","match","calculateAccountStats","gamesData","stats","length","reduce","acc","game","playtime_forever","status","achievements","mostPlayedGame","recentlyPlayed","gamesNotPlayed","achievementRate","totalAchievementsAvailable","averagePlaytime","mostPlayed","prev","current","title","name","playtime","round","progress","gamesWithPlaytime","twoWeeksAgo","rtime_last_played","sort","a","b","slice","map","lastPlayed","handleSteamIdSubmit","e","preventDefault","identifier","finalSteamId","resolveVanityUrl","Error","player","getPlayerInfo","ownedGames","getOwnedGames","recentGames","getRecentlyPlayedGames","recentGameIds","Set","appid","gamesWithDetails","Promise","all","_gameDetails","_gameDetails$genres","_gameDetails2","_gameDetails3","getGameAchievements","gameDetails","getGameDetails","console","log","message","completedAchievements","achieved","id","image","playTime","genres","genre","description","release_date","metacritic","err","updateGameStatus","gameId","newStatus","filteredGames","matchesFilter","matchesSearch","toLowerCase","includes","filterButtons","value","label","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","placeholder","disabled","btn","onStatusChange","_c","$RefreshReg$"],"sources":["E:/Programming/Projects/JS/steam-tracker/client/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { steamApi } from './services/steamApi';\r\nimport GameCard from './components/GameCard/GameCard';\r\nimport StatsSection from './components/StatsSection/StatsSection';\r\nimport ProfileSection from './components/ProfileSection/ProfileSection';\r\nimport WelcomeMessage from './components/WelcomeMessage/WelcomeMessage';\r\n\r\nfunction App() {\r\n  const [steamId, setSteamId] = useState('');\r\n  const [games, setGames] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  const [filter, setFilter] = useState('all'); // all, completed, in-progress, want-to-play\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [playerInfo, setPlayerInfo] = useState(null);\r\n  const [displayMode, setDisplayMode] = useState(localStorage.getItem('displayMode') || 'grid');\r\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'dark');\r\n  const [accountStats, setAccountStats] = useState({\r\n    totalGames: 0,\r\n    totalPlaytime: 0,\r\n    completedGames: 0,\r\n    averageCompletion: 0,\r\n    totalAchievements: 0\r\n  });\r\n\r\n  // Применяем тему\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n\r\n  // Сохраняем режим отображения\r\n  useEffect(() => {\r\n    localStorage.setItem('displayMode', displayMode);\r\n  }, [displayMode]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(theme === 'dark' ? 'light' : 'dark');\r\n  };\r\n\r\n  const toggleDisplayMode = () => {\r\n    setDisplayMode(displayMode === 'grid' ? 'list' : 'grid');\r\n  };\r\n\r\n  const formatPlayTime = (minutes) => {\r\n    if (!minutes) return '0 hours';\r\n    const hours = Math.floor(minutes / 60);\r\n    const remainingMinutes = minutes % 60;\r\n    \r\n    if (hours === 0) {\r\n      return `${remainingMinutes} minutes`;\r\n    } else if (remainingMinutes === 0) {\r\n      return `${hours.toLocaleString()} hours`;\r\n    } else {\r\n      return `${hours.toLocaleString()} hours ${remainingMinutes} minutes`;\r\n    }\r\n  };\r\n\r\n  const formatLastPlayed = (timestamp) => {\r\n    if (!timestamp) return 'Never played';\r\n    const date = new Date(timestamp * 1000);\r\n    const now = new Date();\r\n    const diffDays = Math.floor((now - date) / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays === 0) return 'Today';\r\n    if (diffDays === 1) return 'Yesterday';\r\n    if (diffDays < 7) return `${diffDays} days ago`;\r\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;\r\n    if (diffDays < 365) return `${Math.floor(diffDays / 30)} months ago`;\r\n    return `${Math.floor(diffDays / 365)} years ago`;\r\n  };\r\n\r\n  // Извлечение Steam ID или vanity URL из разных форматов ввода\r\n  const extractSteamIdentifier = (input) => {\r\n    if (/^\\d+$/.test(input)) return input;\r\n    const urlMatch = input.match(/steamcommunity\\.com\\/(id|profiles)\\/([^\\/]+)/);\r\n    if (urlMatch) return urlMatch[1] === 'profiles' ? urlMatch[2] : urlMatch[2];\r\n    return input;\r\n  };\r\n\r\n  const calculateAccountStats = (gamesData) => {\r\n    const stats = {\r\n      totalGames: gamesData.length,\r\n      totalPlaytime: gamesData.reduce((acc, game) => acc + (game.playtime_forever || 0), 0),\r\n      completedGames: gamesData.filter(game => game.status === 'completed').length,\r\n      totalAchievements: gamesData.reduce((acc, game) => acc + (game.achievements || 0), 0),\r\n      mostPlayedGame: null,\r\n      recentlyPlayed: [],\r\n      gamesNotPlayed: 0,\r\n      achievementRate: 0,\r\n      totalAchievementsAvailable: 0,\r\n      averagePlaytime: 0\r\n    };\r\n    \r\n    // Находим самую играбельную игру\r\n    const mostPlayed = gamesData.reduce((prev, current) => \r\n      (prev.playtime_forever || 0) > (current.playtime_forever || 0) ? prev : current\r\n    , { playtime_forever: 0 });\r\n    \r\n    if (mostPlayed.title) {\r\n      stats.mostPlayedGame = {\r\n        name: mostPlayed.title,\r\n        playtime: formatPlayTime(mostPlayed.playtime_forever)\r\n      };\r\n    }\r\n\r\n    // Подсчитываем игры без времени игры\r\n    stats.gamesNotPlayed = gamesData.filter(game => !game.playtime_forever).length;\r\n\r\n    // Средний процент завершения\r\n    stats.averageCompletion = Math.round(\r\n      gamesData.reduce((acc, game) => acc + game.progress, 0) / gamesData.length\r\n    );\r\n\r\n    // Процент выполнения достижений\r\n    stats.totalAchievementsAvailable = gamesData.reduce((acc, game) => \r\n      acc + (game.totalAchievements || 0), 0\r\n    );\r\n    \r\n    if (stats.totalAchievementsAvailable > 0) {\r\n      stats.achievementRate = Math.round(\r\n        (stats.totalAchievements / stats.totalAchievementsAvailable) * 100\r\n      );\r\n    }\r\n\r\n    // Среднее время в играх (исключая неиграные игры)\r\n    const gamesWithPlaytime = gamesData.filter(game => game.playtime_forever > 0);\r\n    if (gamesWithPlaytime.length > 0) {\r\n      stats.averagePlaytime = Math.round(\r\n        gamesWithPlaytime.reduce((acc, game) => acc + game.playtime_forever, 0) / gamesWithPlaytime.length\r\n      );\r\n    }\r\n\r\n    // Недавно сыгранные игры (последние 2 недели)\r\n    const twoWeeksAgo = Date.now() - (14 * 24 * 60 * 60 * 1000);\r\n    stats.recentlyPlayed = gamesData\r\n      .filter(game => game.rtime_last_played && (game.rtime_last_played * 1000) > twoWeeksAgo)\r\n      .sort((a, b) => b.rtime_last_played - a.rtime_last_played)\r\n      .slice(0, 5)\r\n      .map(game => ({\r\n        name: game.title,\r\n        lastPlayed: formatLastPlayed(game.rtime_last_played)\r\n      }));\r\n\r\n    setAccountStats(stats);\r\n  };\r\n\r\n  const handleSteamIdSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      const identifier = extractSteamIdentifier(steamId);\r\n      let finalSteamId = identifier;\r\n\r\n      if (!identifier.match(/^\\d+$/)) {\r\n        try {\r\n          finalSteamId = await steamApi.resolveVanityUrl(identifier);\r\n        } catch (error) {\r\n          throw new Error('Invalid Steam ID or profile URL. Please check your input and try again.');\r\n        }\r\n      }\r\n\r\n      const player = await steamApi.getPlayerInfo(finalSteamId);\r\n      setPlayerInfo(player);\r\n\r\n      const ownedGames = await steamApi.getOwnedGames(finalSteamId);\r\n      const recentGames = await steamApi.getRecentlyPlayedGames(finalSteamId);\r\n      const recentGameIds = new Set(recentGames.map(game => game.appid));\r\n\r\n      // Получаем дополнительную информацию о каждой игре\r\n      const gamesWithDetails = await Promise.all(\r\n        ownedGames.map(async (game) => {\r\n          let achievements;\r\n          try {\r\n            achievements = await steamApi.getGameAchievements(finalSteamId, game.appid);\r\n          } catch (error) {\r\n            achievements = { achievements: [] };\r\n          }\r\n\r\n          let gameDetails;\r\n          try {\r\n            gameDetails = await steamApi.getGameDetails(game.appid);\r\n          } catch (error) {\r\n            console.log(`Could not fetch details for game ${game.name}:`, error.message);\r\n            gameDetails = null;\r\n          }\r\n          \r\n          const completedAchievements = achievements.filter(a => a.achieved).length;\r\n          const progress = achievements.length > 0 ? \r\n            Math.round((completedAchievements / achievements.length) * 100) : 0;\r\n          const status = progress === 100 ? 'completed' : 'in-progress';\r\n          \r\n          return {\r\n            id: game.appid,\r\n            title: game.name,\r\n            progress: progress,\r\n            achievements: completedAchievements,\r\n            totalAchievements: achievements.length,\r\n            lastPlayed: game.rtime_last_played ? formatLastPlayed(game.rtime_last_played) : 'Never played',\r\n            image: `https://cdn.akamai.steamstatic.com/steam/apps/${game.appid}/header.jpg`,\r\n            playTime: formatPlayTime(game.playtime_forever || 0),\r\n            playtime_forever: game.playtime_forever || 0,\r\n            status: status,\r\n            genres: gameDetails?.genres?.map(genre => genre.description) || [],\r\n            release_date: gameDetails?.release_date || null,\r\n            metacritic: gameDetails?.metacritic || null,\r\n            rtime_last_played: game.rtime_last_played\r\n          };\r\n        })\r\n      );\r\n\r\n      setGames(gamesWithDetails);\r\n      calculateAccountStats(gamesWithDetails);\r\n    } catch (err) {\r\n      setError(err.message || 'Failed to fetch games. Please check your Steam ID or profile URL and try again.');\r\n      console.error('Error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updateGameStatus = (gameId, newStatus) => {\r\n    setGames(games.map(game => \r\n      game.id === gameId ? { ...game, status: newStatus } : game\r\n    ));\r\n  };\r\n\r\n  const filteredGames = games.filter(game => {\r\n    const matchesFilter = filter === 'all' || game.status === filter;\r\n    const matchesSearch = game.title.toLowerCase().includes(searchQuery.toLowerCase());\r\n    return matchesFilter && matchesSearch;\r\n  });\r\n\r\n  // Быстрые фильтры\r\n  const filterButtons = [\r\n    { value: 'all', label: 'All' },\r\n    { value: 'completed', label: 'Completed' },\r\n    { value: 'in-progress', label: 'In Progress' },\r\n    { value: 'want-to-play', label: 'Want to Play' },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div className=\"header-controls\">\r\n          <button onClick={toggleTheme} className=\"theme-toggle\">\r\n            {theme === 'dark' ? '☀️' : '🌙'}\r\n          </button>\r\n          <button onClick={toggleDisplayMode} className=\"display-toggle\">\r\n            {displayMode === 'grid' ? '📝' : '🎴'}\r\n          </button>\r\n        </div>\r\n        <WelcomeMessage />\r\n        <h1>Steam Pixel Progress</h1>\r\n        \r\n        <form onSubmit={handleSteamIdSubmit} className=\"steam-id-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={steamId}\r\n            onChange={(e) => setSteamId(e.target.value)}\r\n            placeholder=\"Enter Steam ID, profile URL, or custom URL\"\r\n            className=\"steam-id-input\"\r\n          />\r\n          <button type=\"submit\" className=\"submit-button\" disabled={loading}>\r\n            {loading ? 'Loading...' : 'Load Profile'}\r\n          </button>\r\n        </form>\r\n      </header>\r\n\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n\r\n      {playerInfo && (\r\n        <ProfileSection playerInfo={playerInfo} />\r\n      )}\r\n\r\n      {games.length > 0 && (\r\n        <>\r\n          <StatsSection games={games} accountStats={accountStats} />\r\n          \r\n          <div className=\"filters\">\r\n            <input\r\n              type=\"text\"\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              placeholder=\"Search games...\"\r\n              className=\"search-input\"\r\n            />\r\n            <div className=\"filter-buttons\">\r\n              {filterButtons.map(btn => (\r\n                <button\r\n                  key={btn.value}\r\n                  className={`filter-btn${filter === btn.value ? ' active' : ''}`}\r\n                  onClick={() => setFilter(btn.value)}\r\n                  type=\"button\"\r\n                >\r\n                  {btn.label}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <main className={`games-container ${displayMode}`}>\r\n            {filteredGames.map(game => (\r\n              <GameCard \r\n                key={game.id} \r\n                game={game} \r\n                onStatusChange={updateGameStatus}\r\n                displayMode={displayMode}\r\n              />\r\n            ))}\r\n          </main>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAOC,cAAc,MAAM,4CAA4C;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqB,MAAM,EAAEC,SAAS,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC2B,WAAW,EAAEC,cAAc,CAAC,GAAG5B,QAAQ,CAAC6B,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,MAAM,CAAC;EAC7F,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhC,QAAQ,CAAC6B,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC;EAC3E,MAAM,CAACG,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC;IAC/CmC,UAAU,EAAE,CAAC;IACbC,aAAa,EAAE,CAAC;IAChBC,cAAc,EAAE,CAAC;IACjBC,iBAAiB,EAAE,CAAC;IACpBC,iBAAiB,EAAE;EACrB,CAAC,CAAC;;EAEF;EACAtC,SAAS,CAAC,MAAM;IACduC,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEX,KAAK,CAAC;IAC1DF,YAAY,CAACc,OAAO,CAAC,OAAO,EAAEZ,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA9B,SAAS,CAAC,MAAM;IACd4B,YAAY,CAACc,OAAO,CAAC,aAAa,EAAEhB,WAAW,CAAC;EAClD,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMiB,WAAW,GAAGA,CAAA,KAAM;IACxBZ,QAAQ,CAACD,KAAK,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;EAC/C,CAAC;EAED,MAAMc,iBAAiB,GAAGA,CAAA,KAAM;IAC9BjB,cAAc,CAACD,WAAW,KAAK,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;EAC1D,CAAC;EAED,MAAMmB,cAAc,GAAIC,OAAO,IAAK;IAClC,IAAI,CAACA,OAAO,EAAE,OAAO,SAAS;IAC9B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,GAAG,EAAE,CAAC;IACtC,MAAMI,gBAAgB,GAAGJ,OAAO,GAAG,EAAE;IAErC,IAAIC,KAAK,KAAK,CAAC,EAAE;MACf,OAAO,GAAGG,gBAAgB,UAAU;IACtC,CAAC,MAAM,IAAIA,gBAAgB,KAAK,CAAC,EAAE;MACjC,OAAO,GAAGH,KAAK,CAACI,cAAc,CAAC,CAAC,QAAQ;IAC1C,CAAC,MAAM;MACL,OAAO,GAAGJ,KAAK,CAACI,cAAc,CAAC,CAAC,UAAUD,gBAAgB,UAAU;IACtE;EACF,CAAC;EAED,MAAME,gBAAgB,GAAIC,SAAS,IAAK;IACtC,IAAI,CAACA,SAAS,EAAE,OAAO,cAAc;IACrC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,GAAG,IAAI,CAAC;IACvC,MAAMG,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAME,QAAQ,GAAGT,IAAI,CAACC,KAAK,CAAC,CAACO,GAAG,GAAGF,IAAI,KAAK,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAEjE,IAAIG,QAAQ,KAAK,CAAC,EAAE,OAAO,OAAO;IAClC,IAAIA,QAAQ,KAAK,CAAC,EAAE,OAAO,WAAW;IACtC,IAAIA,QAAQ,GAAG,CAAC,EAAE,OAAO,GAAGA,QAAQ,WAAW;IAC/C,IAAIA,QAAQ,GAAG,EAAE,EAAE,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACQ,QAAQ,GAAG,CAAC,CAAC,YAAY;IACjE,IAAIA,QAAQ,GAAG,GAAG,EAAE,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACQ,QAAQ,GAAG,EAAE,CAAC,aAAa;IACpE,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACQ,QAAQ,GAAG,GAAG,CAAC,YAAY;EAClD,CAAC;;EAED;EACA,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;IACxC,IAAI,OAAO,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE,OAAOA,KAAK;IACrC,MAAME,QAAQ,GAAGF,KAAK,CAACG,KAAK,CAAC,8CAA8C,CAAC;IAC5E,IAAID,QAAQ,EAAE,OAAOA,QAAQ,CAAC,CAAC,CAAC,KAAK,UAAU,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC;IAC3E,OAAOF,KAAK;EACd,CAAC;EAED,MAAMI,qBAAqB,GAAIC,SAAS,IAAK;IAC3C,MAAMC,KAAK,GAAG;MACZ/B,UAAU,EAAE8B,SAAS,CAACE,MAAM;MAC5B/B,aAAa,EAAE6B,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACC,gBAAgB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACrFlC,cAAc,EAAE4B,SAAS,CAAC5C,MAAM,CAACiD,IAAI,IAAIA,IAAI,CAACE,MAAM,KAAK,WAAW,CAAC,CAACL,MAAM;MAC5E5B,iBAAiB,EAAE0B,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,IAAIC,IAAI,CAACG,YAAY,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACrFC,cAAc,EAAE,IAAI;MACpBC,cAAc,EAAE,EAAE;MAClBC,cAAc,EAAE,CAAC;MACjBC,eAAe,EAAE,CAAC;MAClBC,0BAA0B,EAAE,CAAC;MAC7BC,eAAe,EAAE;IACnB,CAAC;;IAED;IACA,MAAMC,UAAU,GAAGf,SAAS,CAACG,MAAM,CAAC,CAACa,IAAI,EAAEC,OAAO,KAChD,CAACD,IAAI,CAACV,gBAAgB,IAAI,CAAC,KAAKW,OAAO,CAACX,gBAAgB,IAAI,CAAC,CAAC,GAAGU,IAAI,GAAGC,OAAO,EAC/E;MAAEX,gBAAgB,EAAE;IAAE,CAAC,CAAC;IAE1B,IAAIS,UAAU,CAACG,KAAK,EAAE;MACpBjB,KAAK,CAACQ,cAAc,GAAG;QACrBU,IAAI,EAAEJ,UAAU,CAACG,KAAK;QACtBE,QAAQ,EAAEvC,cAAc,CAACkC,UAAU,CAACT,gBAAgB;MACtD,CAAC;IACH;;IAEA;IACAL,KAAK,CAACU,cAAc,GAAGX,SAAS,CAAC5C,MAAM,CAACiD,IAAI,IAAI,CAACA,IAAI,CAACC,gBAAgB,CAAC,CAACJ,MAAM;;IAE9E;IACAD,KAAK,CAAC5B,iBAAiB,GAAGW,IAAI,CAACqC,KAAK,CAClCrB,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACiB,QAAQ,EAAE,CAAC,CAAC,GAAGtB,SAAS,CAACE,MACtE,CAAC;;IAED;IACAD,KAAK,CAACY,0BAA0B,GAAGb,SAAS,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAC5DD,GAAG,IAAIC,IAAI,CAAC/B,iBAAiB,IAAI,CAAC,CAAC,EAAE,CACvC,CAAC;IAED,IAAI2B,KAAK,CAACY,0BAA0B,GAAG,CAAC,EAAE;MACxCZ,KAAK,CAACW,eAAe,GAAG5B,IAAI,CAACqC,KAAK,CAC/BpB,KAAK,CAAC3B,iBAAiB,GAAG2B,KAAK,CAACY,0BAA0B,GAAI,GACjE,CAAC;IACH;;IAEA;IACA,MAAMU,iBAAiB,GAAGvB,SAAS,CAAC5C,MAAM,CAACiD,IAAI,IAAIA,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC7E,IAAIiB,iBAAiB,CAACrB,MAAM,GAAG,CAAC,EAAE;MAChCD,KAAK,CAACa,eAAe,GAAG9B,IAAI,CAACqC,KAAK,CAChCE,iBAAiB,CAACpB,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,gBAAgB,EAAE,CAAC,CAAC,GAAGiB,iBAAiB,CAACrB,MAC9F,CAAC;IACH;;IAEA;IACA,MAAMsB,WAAW,GAAGjC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK;IAC3DS,KAAK,CAACS,cAAc,GAAGV,SAAS,CAC7B5C,MAAM,CAACiD,IAAI,IAAIA,IAAI,CAACoB,iBAAiB,IAAKpB,IAAI,CAACoB,iBAAiB,GAAG,IAAI,GAAID,WAAW,CAAC,CACvFE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACH,iBAAiB,GAAGE,CAAC,CAACF,iBAAiB,CAAC,CACzDI,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,GAAG,CAACzB,IAAI,KAAK;MACZc,IAAI,EAAEd,IAAI,CAACa,KAAK;MAChBa,UAAU,EAAE3C,gBAAgB,CAACiB,IAAI,CAACoB,iBAAiB;IACrD,CAAC,CAAC,CAAC;IAELxD,eAAe,CAACgC,KAAK,CAAC;EACxB,CAAC;EAED,MAAM+B,mBAAmB,GAAG,MAAOC,CAAC,IAAK;IACvCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBjF,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACF,MAAMgF,UAAU,GAAGzC,sBAAsB,CAAC9C,OAAO,CAAC;MAClD,IAAIwF,YAAY,GAAGD,UAAU;MAE7B,IAAI,CAACA,UAAU,CAACrC,KAAK,CAAC,OAAO,CAAC,EAAE;QAC9B,IAAI;UACFsC,YAAY,GAAG,MAAMnG,QAAQ,CAACoG,gBAAgB,CAACF,UAAU,CAAC;QAC5D,CAAC,CAAC,OAAOjF,KAAK,EAAE;UACd,MAAM,IAAIoF,KAAK,CAAC,yEAAyE,CAAC;QAC5F;MACF;MAEA,MAAMC,MAAM,GAAG,MAAMtG,QAAQ,CAACuG,aAAa,CAACJ,YAAY,CAAC;MACzD3E,aAAa,CAAC8E,MAAM,CAAC;MAErB,MAAME,UAAU,GAAG,MAAMxG,QAAQ,CAACyG,aAAa,CAACN,YAAY,CAAC;MAC7D,MAAMO,WAAW,GAAG,MAAM1G,QAAQ,CAAC2G,sBAAsB,CAACR,YAAY,CAAC;MACvE,MAAMS,aAAa,GAAG,IAAIC,GAAG,CAACH,WAAW,CAACb,GAAG,CAACzB,IAAI,IAAIA,IAAI,CAAC0C,KAAK,CAAC,CAAC;;MAElE;MACA,MAAMC,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CACxCT,UAAU,CAACX,GAAG,CAAC,MAAOzB,IAAI,IAAK;QAAA,IAAA8C,YAAA,EAAAC,mBAAA,EAAAC,aAAA,EAAAC,aAAA;QAC7B,IAAI9C,YAAY;QAChB,IAAI;UACFA,YAAY,GAAG,MAAMvE,QAAQ,CAACsH,mBAAmB,CAACnB,YAAY,EAAE/B,IAAI,CAAC0C,KAAK,CAAC;QAC7E,CAAC,CAAC,OAAO7F,KAAK,EAAE;UACdsD,YAAY,GAAG;YAAEA,YAAY,EAAE;UAAG,CAAC;QACrC;QAEA,IAAIgD,WAAW;QACf,IAAI;UACFA,WAAW,GAAG,MAAMvH,QAAQ,CAACwH,cAAc,CAACpD,IAAI,CAAC0C,KAAK,CAAC;QACzD,CAAC,CAAC,OAAO7F,KAAK,EAAE;UACdwG,OAAO,CAACC,GAAG,CAAC,oCAAoCtD,IAAI,CAACc,IAAI,GAAG,EAAEjE,KAAK,CAAC0G,OAAO,CAAC;UAC5EJ,WAAW,GAAG,IAAI;QACpB;QAEA,MAAMK,qBAAqB,GAAGrD,YAAY,CAACpD,MAAM,CAACuE,CAAC,IAAIA,CAAC,CAACmC,QAAQ,CAAC,CAAC5D,MAAM;QACzE,MAAMoB,QAAQ,GAAGd,YAAY,CAACN,MAAM,GAAG,CAAC,GACtClB,IAAI,CAACqC,KAAK,CAAEwC,qBAAqB,GAAGrD,YAAY,CAACN,MAAM,GAAI,GAAG,CAAC,GAAG,CAAC;QACrE,MAAMK,MAAM,GAAGe,QAAQ,KAAK,GAAG,GAAG,WAAW,GAAG,aAAa;QAE7D,OAAO;UACLyC,EAAE,EAAE1D,IAAI,CAAC0C,KAAK;UACd7B,KAAK,EAAEb,IAAI,CAACc,IAAI;UAChBG,QAAQ,EAAEA,QAAQ;UAClBd,YAAY,EAAEqD,qBAAqB;UACnCvF,iBAAiB,EAAEkC,YAAY,CAACN,MAAM;UACtC6B,UAAU,EAAE1B,IAAI,CAACoB,iBAAiB,GAAGrC,gBAAgB,CAACiB,IAAI,CAACoB,iBAAiB,CAAC,GAAG,cAAc;UAC9FuC,KAAK,EAAE,iDAAiD3D,IAAI,CAAC0C,KAAK,aAAa;UAC/EkB,QAAQ,EAAEpF,cAAc,CAACwB,IAAI,CAACC,gBAAgB,IAAI,CAAC,CAAC;UACpDA,gBAAgB,EAAED,IAAI,CAACC,gBAAgB,IAAI,CAAC;UAC5CC,MAAM,EAAEA,MAAM;UACd2D,MAAM,EAAE,EAAAf,YAAA,GAAAK,WAAW,cAAAL,YAAA,wBAAAC,mBAAA,GAAXD,YAAA,CAAae,MAAM,cAAAd,mBAAA,uBAAnBA,mBAAA,CAAqBtB,GAAG,CAACqC,KAAK,IAAIA,KAAK,CAACC,WAAW,CAAC,KAAI,EAAE;UAClEC,YAAY,EAAE,EAAAhB,aAAA,GAAAG,WAAW,cAAAH,aAAA,uBAAXA,aAAA,CAAagB,YAAY,KAAI,IAAI;UAC/CC,UAAU,EAAE,EAAAhB,aAAA,GAAAE,WAAW,cAAAF,aAAA,uBAAXA,aAAA,CAAagB,UAAU,KAAI,IAAI;UAC3C7C,iBAAiB,EAAEpB,IAAI,CAACoB;QAC1B,CAAC;MACH,CAAC,CACH,CAAC;MAED1E,QAAQ,CAACiG,gBAAgB,CAAC;MAC1BjD,qBAAqB,CAACiD,gBAAgB,CAAC;IACzC,CAAC,CAAC,OAAOuB,GAAG,EAAE;MACZpH,QAAQ,CAACoH,GAAG,CAACX,OAAO,IAAI,iFAAiF,CAAC;MAC1GF,OAAO,CAACxG,KAAK,CAAC,QAAQ,EAAEqH,GAAG,CAAC;IAC9B,CAAC,SAAS;MACRtH,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMuH,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,SAAS,KAAK;IAC9C3H,QAAQ,CAACD,KAAK,CAACgF,GAAG,CAACzB,IAAI,IACrBA,IAAI,CAAC0D,EAAE,KAAKU,MAAM,GAAG;MAAE,GAAGpE,IAAI;MAAEE,MAAM,EAAEmE;IAAU,CAAC,GAAGrE,IACxD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMsE,aAAa,GAAG7H,KAAK,CAACM,MAAM,CAACiD,IAAI,IAAI;IACzC,MAAMuE,aAAa,GAAGxH,MAAM,KAAK,KAAK,IAAIiD,IAAI,CAACE,MAAM,KAAKnD,MAAM;IAChE,MAAMyH,aAAa,GAAGxE,IAAI,CAACa,KAAK,CAAC4D,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACzH,WAAW,CAACwH,WAAW,CAAC,CAAC,CAAC;IAClF,OAAOF,aAAa,IAAIC,aAAa;EACvC,CAAC,CAAC;;EAEF;EACA,MAAMG,aAAa,GAAG,CACpB;IAAEC,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,EAC9B;IAAED,KAAK,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAY,CAAC,EAC1C;IAAED,KAAK,EAAE,aAAa;IAAEC,KAAK,EAAE;EAAc,CAAC,EAC9C;IAAED,KAAK,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAe,CAAC,CACjD;EAED,oBACE3I,OAAA;IAAK4I,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClB7I,OAAA;MAAQ4I,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5B7I,OAAA;QAAK4I,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9B7I,OAAA;UAAQ8I,OAAO,EAAE1G,WAAY;UAACwG,SAAS,EAAC,cAAc;UAAAC,QAAA,EACnDtH,KAAK,KAAK,MAAM,GAAG,IAAI,GAAG;QAAI;UAAAwH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC,eACTlJ,OAAA;UAAQ8I,OAAO,EAAEzG,iBAAkB;UAACuG,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC3D1H,WAAW,KAAK,MAAM,GAAG,IAAI,GAAG;QAAI;UAAA4H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC,eACNlJ,OAAA,CAACF,cAAc;QAAAiJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAClBlJ,OAAA;QAAA6I,QAAA,EAAI;MAAoB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE7BlJ,OAAA;QAAMmJ,QAAQ,EAAE1D,mBAAoB;QAACmD,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5D7I,OAAA;UACEoJ,IAAI,EAAC,MAAM;UACXV,KAAK,EAAErI,OAAQ;UACfgJ,QAAQ,EAAG3D,CAAC,IAAKpF,UAAU,CAACoF,CAAC,CAAC4D,MAAM,CAACZ,KAAK,CAAE;UAC5Ca,WAAW,EAAC,4CAA4C;UACxDX,SAAS,EAAC;QAAgB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACFlJ,OAAA;UAAQoJ,IAAI,EAAC,QAAQ;UAACR,SAAS,EAAC,eAAe;UAACY,QAAQ,EAAE/I,OAAQ;UAAAoI,QAAA,EAC/DpI,OAAO,GAAG,YAAY,GAAG;QAAc;UAAAsI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAERvI,KAAK,iBAAIX,OAAA;MAAK4I,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAElI;IAAK;MAAAoI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAErDjI,UAAU,iBACTjB,OAAA,CAACH,cAAc;MAACoB,UAAU,EAAEA;IAAW;MAAA8H,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC1C,EAEA3I,KAAK,CAACoD,MAAM,GAAG,CAAC,iBACf3D,OAAA,CAAAE,SAAA;MAAA2I,QAAA,gBACE7I,OAAA,CAACJ,YAAY;QAACW,KAAK,EAAEA,KAAM;QAACkB,YAAY,EAAEA;MAAa;QAAAsH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE1DlJ,OAAA;QAAK4I,SAAS,EAAC,SAAS;QAAAC,QAAA,gBACtB7I,OAAA;UACEoJ,IAAI,EAAC,MAAM;UACXV,KAAK,EAAE3H,WAAY;UACnBsI,QAAQ,EAAG3D,CAAC,IAAK1E,cAAc,CAAC0E,CAAC,CAAC4D,MAAM,CAACZ,KAAK,CAAE;UAChDa,WAAW,EAAC,iBAAiB;UAC7BX,SAAS,EAAC;QAAc;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB,CAAC,eACFlJ,OAAA;UAAK4I,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC5BJ,aAAa,CAAClD,GAAG,CAACkE,GAAG,iBACpBzJ,OAAA;YAEE4I,SAAS,EAAE,aAAa/H,MAAM,KAAK4I,GAAG,CAACf,KAAK,GAAG,SAAS,GAAG,EAAE,EAAG;YAChEI,OAAO,EAAEA,CAAA,KAAMhI,SAAS,CAAC2I,GAAG,CAACf,KAAK,CAAE;YACpCU,IAAI,EAAC,QAAQ;YAAAP,QAAA,EAEZY,GAAG,CAACd;UAAK,GALLc,GAAG,CAACf,KAAK;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMR,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAENlJ,OAAA;QAAM4I,SAAS,EAAE,mBAAmBzH,WAAW,EAAG;QAAA0H,QAAA,EAC/CT,aAAa,CAAC7C,GAAG,CAACzB,IAAI,iBACrB9D,OAAA,CAACL,QAAQ;UAEPmE,IAAI,EAAEA,IAAK;UACX4F,cAAc,EAAEzB,gBAAiB;UACjC9G,WAAW,EAAEA;QAAY,GAHpB2C,IAAI,CAAC0D,EAAE;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIb,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA,eACP,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9I,EAAA,CAtTQD,GAAG;AAAAwJ,EAAA,GAAHxJ,GAAG;AAwTZ,eAAeA,GAAG;AAAC,IAAAwJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}